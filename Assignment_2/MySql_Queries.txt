create database Mysql_Assignment2;

use Mysql_Assignment2;

-- Part-1

-- table creation and value insertion
-- 1
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    City VARCHAR(50),
    SignupDate DATE
);
INSERT INTO Customer VALUES
(1, 'Alice Johnson', 'alice.johnson@example.com', 'Chennai', '2023-01-15'),
(2, 'Bob Smith', 'bob.smith@example.com', 'Mumbai', '2023-02-20'),
(3, 'Charlie Lee', 'charlie.lee@example.com', 'Delhi', '2023-03-10'),
(4, 'Diana Patel', 'diana.patel@example.com', 'Mumbai', '2023-04-05'),
(5, 'Evan Thomas', 'evan.thomas@example.com', 'Kochi', '2023-05-18'),
(6, 'Ali', 'ali.johnson@example.com', 'Mumbai', '2023-01-15');

-- 2
CREATE TABLE Order (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10,2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

INSERT INTO Order (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1001, 1, '2025-06-01', 51.98),
(1002, 2, '2023-08-02', 9.99),
(1003, 3, '2025-06-06', 15.75),
(1004, 4, '2023-05-04', 74.97),
(1005, 5, '2022-06-05', 25.99);

-- 3
CREATE TABLE Product (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10,2)
);

INSERT INTO Product VALUES
(101, 'Wireless Mouse', 'Electronics', 25.99),
(102, 'Bluetooth Speaker', 'Electronics', 49.99),
(103, 'Notebook', 'Stationery', 3.49),
(104, 'Desk Lamp', 'Home', 15.75),
(105, 'Water Bottle', 'Fitness', 9.99);

-- 4
CREATE TABLE OrderDetail (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    Price DECIMAL(10,2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO OrderDetail(OrderDetailID, OrderID, ProductID, Quantity, Price) VALUES
(1, 1001, 101, 2, 2599),   
(2, 1002, 105, 1, 999),     
(3, 1003, 104, 1, 15.75),    
(4, 1004, 102, 1, 4999),    
(5, 1004, 103, 5, 300),
(6, 1005, 101, 2, 5999);

-- Part2

-- Basic Quries

-- 1
select * from customer;

-- 2
select * from Order
where OrderDate >= CURDATE() - interval 30 day;

-- 3
select productName,Price from product;

-- 4
select category,count(productId) from product
group by category;

-- Filtering and Conditions

-- 5
select * from customer
where city='Mumbai';

-- 6
select * from orderdetail
where price >=5000;

-- 7
select * from customer
where signupdate>= '2024-01-01';

-- Joins

-- 8
select o.OrderID, o.CustomerID, o.OrderDate, o.TotalAmount,c.name
from order o join customer c
on o.customerid=c.customerid;

-- 9
select p.productId,p.productname
from product p join orderdetail o 
on  p.productId=o.productId;

-- 10
select c.CustomerID, c.Name
from Customer c
left join Order o ON c.CustomerID = o.CustomerID
where o.OrderID is null;

-- Aggregation and grouping

-- 11
select c.CustomerID, c.Name,sum(o.Totalamount)
from Customer c
left join Order o ON c.CustomerID = o.CustomerID
group by c.customerId;

-- 12
select p.productname,sum(od.quantity) as TotalQuantity
from product p join orderdetail od
on p.productId=od.productId
group by p.ProductID, p.ProductName
order by TotalQuantity DESC
LIMIT 1;

-- 13
select c.customerid,c.name,avg(o.totalamount) as avg_value
from customer c join order o
on c.customerid=o.customerid
group by c.customerid;

-- 14
select p.category,sum(od.price*od.quantity)
from product p join orderdetail od
on p.productid=od.productid
group by p.category;

-- subqueries

-- 15
select c.customerid,c.name,sum(o.totalamount) as total
from customer c join order o
on c.customerid=o.customerid
group by customerid
having total>(select avg(totalamount) from orders);

-- 16
select p.productid,p.productname
from product p left join orderdetail o
on p.productid=o.productid
where o.productid is null;

-- 17
select c.customerid,c.name,max(o.orderdate)
from customer c join order o
on c.customerid=o.customerid
group by c.customerid,c.name;

-- Advanced queries

-- 18
select c.customerid,c.name,sum(o.totalamount) as Total_Spent
from customer c join order o
on c.customerid=o.customerid
group by c.customerid,c.name
order by sum(o.totalamount) desc;

-- 19
select c.customerid,c.name,count(o.orderid) as Total_count
from customer c join order o
on c.customerid=o.customerid
group by c.customerid,c.name
order by count(o.orderid) desc
limit 3;

-- 20
select p.ProductID, p.ProductName, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers
<<<<<<< HEAD
from Products p
join OrderDetails od on p.ProductID = od.ProductID
=======
from Product p
join OrderDetail od on p.ProductID = od.ProductID
>>>>>>> 8c81202 (made correction)
join Orders o on od.OrderID = o.OrderID
group by p.ProductID, p.ProductName;





















































